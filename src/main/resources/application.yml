spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://root.crj0seofnf1o.ap-northeast-2.rds.amazonaws.com:3306/haneum?useSSL=false&allowPublicKeyRetrieval=true&validationQuery="select 1"
    username: root
    password: root1234
  jpa:
    properties:
      hibernate:
        format_sql: 'true'
    show-sql: 'true'
    hibernate:
      ddl-auto: update
  output:
    ansi:
      enabled: always

  kafka:
    bootstrap-servers: 13.209.92.240:9092
    consumer:
      # consumer bootstrap servers가 따로 존재하면 설정
      # bootstrap-servers: 3.34.97.97:9092

      # 식별 가능한 Consumer Group Id
      group-id: jsonGroup
      # Kafka 서버에 초기 offset이 없거나, 서버에 현재 offset이 더 이상 존재하지 않을 경우 수행할 작업을 설정
      # latest: 가장 최근에 생산된 메시지로 offeset reset
      # earliest: 가장 오래된 메시지로 offeset reset
      # none: offset 정보가 없으면 Exception 발생
      auto-offset-reset: latest
      # 데이터를 받아올 때, key/value를 역직렬화
      # JSON 데이터를 받아올 것이라면 JsonDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # producer bootstrap servers가 따로 존재하면 설정
      # bootstrap-servers: 3.34.97.97:9092

      # 데이터를 보낼 때, key/value를 직렬화
      # JSON 데이터를 보낼 것이라면 JsonDeserializer ,StringSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer


logging:
  file:
    path: /var/log
#  file: /var/log/requestloggingweb/requestloggingweb.log
  level:
    haneum:
      troller: DEBUG
